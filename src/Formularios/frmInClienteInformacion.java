/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Formularios;

import Clases.ClassCliente;
import Clases.ClassMostrarClientes;
import ConexionBaseDeDatos.ConexionBD;
import ConexionBaseDeDatos.ConexionBD_Cliente;
import static Formularios.frmPrincipal.jdpPantallaPrincipal;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.sql.Blob;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author alberto
 */
public class frmInClienteInformacion extends javax.swing.JInternalFrame {

    //VARIABLES GLOBALES    
    //Variables para Alto y Ancho de Otros InternalFrame
    int alto, ancho;
    
    //VARIABLES PARA OBTENER DIRECCION Y CODIGO DE DIRECCION
    public static int codigo_direccion;
    public static String direccion_completa;
    
    //VARIABLE PARA SABER SI SE INGRESÓ CORRECTAMENTE EL REGISTRO DEL CLIENTE
    boolean actualizarCliente = false;
    
    
    //VARIABLE GLOBAL PARA DOCUMENTOS
    String nombreArchivo, rutaArchivo;
    FileInputStream pdfParaDpiSiActualiza;
    InputStream pdfParaDpiSiNoActualiza;
    boolean verificarSiAgregoArchivo = false;
    
    //VARIABLES GLOBALES PARA GUARDAR DATOS QUE NO SE MOSTRARÁN EN LOS TXT
    public static int codigo_cliente;
    String state;
    Blob pdfDpi;
    
    
    
    public frmInClienteInformacion() {
        initComponents();
        
        //SE LLENAN LOS CAMPOS DEL CLIENTE SELECCIONADO
        ConexionBD.Iniciar();
        llenarCampos(ConexionBD_Cliente.obtenerTodosLosDatosDelCliente(codigo_cliente));
        ConexionBD.Finalizar();
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        txtInformacionClienteDPI = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        txtInformacionClienteNombres = new javax.swing.JTextField();
        txtInformacionClienteApellidos = new javax.swing.JTextField();
        cmbInformacionClienteGenero = new javax.swing.JComboBox<>();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        txtInformacionClienteTelefono = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        txtInformacionClienteCorreoElectronico = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        txtInformacionClienteDireccion = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        txtInformacionClienteCuentaBancaria = new javax.swing.JTextField();
        txtInformacionClientePerfilFacebook = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        txtInformacionClientePerfilInstagram = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        txtInformacionClientePDFDPI = new javax.swing.JTextField();
        lblBotonActualizarRegistro = new javax.swing.JLabel();
        lblBotonBuscarDireccion = new javax.swing.JLabel();
        lblBotonAdjuntarArchivo = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        dcInformacionFechaNacimiento = new com.toedter.calendar.JDateChooser();
        jLabel15 = new javax.swing.JLabel();
        txtInformacionClienteCalleAvenida = new javax.swing.JTextField();
        jLabel16 = new javax.swing.JLabel();
        txtInformacionClienteNumeroCasa = new javax.swing.JTextField();
        jLabel17 = new javax.swing.JLabel();
        txtInformacionClienteZona = new javax.swing.JTextField();
        jLabel19 = new javax.swing.JLabel();

        setBackground(new java.awt.Color(255, 255, 255));
        setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        setClosable(true);

        jPanel1.setBackground(new java.awt.Color(134, 185, 22));

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("INFORMACIÓN DEL CLIENTE");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(193, 193, 193))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        jLabel2.setText("1. DPI:");

        txtInformacionClienteDPI.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtInformacionClienteDPIKeyTyped(evt);
            }
        });

        jLabel3.setText("2. NOMBRES:");

        cmbInformacionClienteGenero.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccione Género...", "Masculino", "Femenino" }));

        jLabel4.setText("3. APELLIDOS:");

        jLabel5.setText("4. GÉNERO:");

        jLabel6.setText("5. FECHA NACIMIENTO:");

        jLabel7.setText("6. TELÉFONO:");

        txtInformacionClienteTelefono.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtInformacionClienteTelefonoKeyTyped(evt);
            }
        });

        jLabel8.setText("7. CORREO ELECTRÓNICO:");

        jLabel9.setText("11. DIRECCIÓN:");

        txtInformacionClienteDireccion.setEditable(false);

        jLabel10.setText("12. CUENTA BANCARIA:");

        txtInformacionClienteCuentaBancaria.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtInformacionClienteCuentaBancariaKeyTyped(evt);
            }
        });

        jLabel11.setText("13. PERFIL DE FACEBOOK:");

        jLabel12.setText("14. PERFIL DE INSTAGRAM:");

        jLabel13.setText("15. PDF DE DPI:");

        txtInformacionClientePDFDPI.setEditable(false);

        lblBotonActualizarRegistro.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/crud_save_50x50.png"))); // NOI18N
        lblBotonActualizarRegistro.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblBotonActualizarRegistroMouseClicked(evt);
            }
        });

        lblBotonBuscarDireccion.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/crud_search_20x20.png"))); // NOI18N
        lblBotonBuscarDireccion.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblBotonBuscarDireccionMouseClicked(evt);
            }
        });

        lblBotonAdjuntarArchivo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/icon_adjunto_20x20.png"))); // NOI18N
        lblBotonAdjuntarArchivo.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblBotonAdjuntarArchivoMouseClicked(evt);
            }
        });

        jLabel14.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/icon_pdf_20x20.png"))); // NOI18N

        dcInformacionFechaNacimiento.setDateFormatString("yyyy-MM-dd");

        jLabel15.setText("8. CALLE/AVENIDA:");

        jLabel16.setText("9. NÚMERO DE CASA:");

        txtInformacionClienteNumeroCasa.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtInformacionClienteNumeroCasaKeyTyped(evt);
            }
        });

        jLabel17.setText("10. ZONA:");

        txtInformacionClienteZona.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtInformacionClienteZonaKeyTyped(evt);
            }
        });

        jLabel19.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/icon_see_20x20.png"))); // NOI18N
        jLabel19.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel19MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(lblBotonActualizarRegistro)
                .addGap(346, 346, 346))
            .addGroup(layout.createSequentialGroup()
                .addGap(80, 80, 80)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel15)
                            .addComponent(txtInformacionClienteCalleAvenida, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtInformacionClienteNumeroCasa, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel16))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel17)
                            .addComponent(txtInformacionClienteZona, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(80, 80, 80))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtInformacionClientePerfilFacebook, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel11))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtInformacionClientePerfilInstagram, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel12))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel13)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabel14)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(jLabel19))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(txtInformacionClientePDFDPI, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(lblBotonAdjuntarArchivo))))
                            .addComponent(jLabel10, javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel6)
                                    .addComponent(dcInformacionFechaNacimiento, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtInformacionClienteTelefono, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel7))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel8)
                                    .addComponent(txtInformacionClienteCorreoElectronico, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtInformacionClienteNombres, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel3))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtInformacionClienteApellidos, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel4))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel5)
                                    .addComponent(cmbInformacionClienteGenero, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel9)
                                    .addComponent(txtInformacionClienteDireccion, javax.swing.GroupLayout.PREFERRED_SIZE, 552, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(lblBotonBuscarDireccion))
                            .addComponent(txtInformacionClienteDPI, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtInformacionClienteCuentaBancaria, javax.swing.GroupLayout.Alignment.LEADING))
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtInformacionClienteDPI, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4)
                    .addComponent(jLabel5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtInformacionClienteNombres, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtInformacionClienteApellidos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmbInformacionClienteGenero, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(jLabel7)
                    .addComponent(jLabel8))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(txtInformacionClienteTelefono, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(txtInformacionClienteCorreoElectronico, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(dcInformacionFechaNacimiento, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel15, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel16)
                        .addComponent(jLabel17)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtInformacionClienteCalleAvenida, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtInformacionClienteNumeroCasa, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtInformacionClienteZona, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jLabel9)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblBotonBuscarDireccion)
                    .addComponent(txtInformacionClienteDireccion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jLabel10)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtInformacionClienteCuentaBancaria, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel11)
                            .addComponent(jLabel12)
                            .addComponent(jLabel13)
                            .addComponent(jLabel14))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(txtInformacionClientePerfilFacebook, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(txtInformacionClientePerfilInstagram, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(txtInformacionClientePDFDPI, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(lblBotonAdjuntarArchivo))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(lblBotonActualizarRegistro))
                    .addComponent(jLabel19))
                .addContainerGap(19, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void lblBotonBuscarDireccionMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblBotonBuscarDireccionMouseClicked
        // TODO add your handling code here:
        //Abrir el Formulario Direccion
        frmInClienteBuscarDireccion frmClientesBuscarDireccion = new frmInClienteBuscarDireccion();
        ancho = (jdpPantallaPrincipal.getWidth()/2) - frmClientesBuscarDireccion.getWidth()/2;
        alto = (jdpPantallaPrincipal.getHeight()/2) - frmClientesBuscarDireccion.getHeight()/2;
        
        frmInClienteBuscarDireccion.comparador = false;
        jdpPantallaPrincipal.add(frmClientesBuscarDireccion);
        frmClientesBuscarDireccion.setLocation(ancho, alto);
        frmClientesBuscarDireccion.show();
    }//GEN-LAST:event_lblBotonBuscarDireccionMouseClicked

    private void lblBotonAdjuntarArchivoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblBotonAdjuntarArchivoMouseClicked
        // TODO add your handling code here:
         //SE SELECCIONA EL ARCHIVO A SUBIR
        JFileChooser archivoSeleccionado = new JFileChooser();
        FileNameExtensionFilter filtro = new FileNameExtensionFilter("Archivos PDF", "pdf");
        archivoSeleccionado.setFileFilter(filtro);
        int opcion = archivoSeleccionado.showOpenDialog(this);
        
        if(opcion == JFileChooser.APPROVE_OPTION){
            nombreArchivo = archivoSeleccionado.getSelectedFile().getName();
            rutaArchivo = archivoSeleccionado.getSelectedFile().getPath();
            
            txtInformacionClientePDFDPI.setText(nombreArchivo);
            
            //SE MODIFICA LA BANDERA PARA INDICAR QUE SE AGREGÓ UN ARCHIVO
            verificarSiAgregoArchivo = true;
        }
    }//GEN-LAST:event_lblBotonAdjuntarArchivoMouseClicked

    private void lblBotonActualizarRegistroMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblBotonActualizarRegistroMouseClicked
        //VALIDAR CAMPOS VACÍOS
        if(validarCampos() == false){
            return;
        }
        
        //CAMBIAR EL FORMATO DE LA FECHA
        DateFormat formato = new SimpleDateFormat("yyyy-MM-dd");
        String fechaNacimiento = formato.format(dcInformacionFechaNacimiento.getDate());
        
        //PREPARAR ARCHIVO PARA BASE DE DATOS SI EXISTE UNO
        if(txtInformacionClientePDFDPI.getText().equals("PDF Agregado")){
        
            try {
                pdfParaDpiSiNoActualiza = pdfDpi.getBinaryStream();
                
                //ACTUALIZACIÓN DE DATOS
                ConexionBD.Iniciar();
                actualizarCliente = ConexionBD_Cliente.actualizarCliente(state, txtInformacionClienteDPI.getText(), txtInformacionClienteNombres.getText().toUpperCase(),
                    txtInformacionClienteApellidos.getText().toUpperCase(), cmbInformacionClienteGenero.getSelectedItem().toString().toUpperCase(),
                    fechaNacimiento, txtInformacionClienteTelefono.getText(), txtInformacionClienteCorreoElectronico.getText(),
                    txtInformacionClienteCalleAvenida.getText().toUpperCase(), txtInformacionClienteNumeroCasa.getText().toUpperCase(),
                    txtInformacionClienteZona.getText(), codigo_direccion, txtInformacionClienteCuentaBancaria.getText(),
                    txtInformacionClientePerfilFacebook.getText().toUpperCase(), txtInformacionClientePerfilInstagram.getText().toUpperCase(),
                    pdfParaDpiSiNoActualiza, codigo_cliente);
                ConexionBD.Finalizar();
            } catch (SQLException ex) {
                Logger.getLogger(frmInClienteInformacion.class.getName()).log(Level.SEVERE, null, ex);
            }
        }else{
            //SENTENCIA PARA VERIFICAR SI AGREGÓ ARCHIVO O SI QUEDARÁ NULL
            if(verificarSiAgregoArchivo == true){
                File file = new File(rutaArchivo);
                try {
                    pdfParaDpiSiActualiza = new FileInputStream(file);
                }catch (FileNotFoundException ex) {
                    Logger.getLogger(frmInClienteNuevo.class.getName()).log(Level.SEVERE, null, ex);
                }
            }else{
                pdfParaDpiSiActualiza = null;
            }            
                
 
            //ACTUALIZACIÓN DE DATOS
            ConexionBD.Iniciar();
            actualizarCliente = ConexionBD_Cliente.actualizarCliente(state, txtInformacionClienteDPI.getText(), txtInformacionClienteNombres.getText().toUpperCase(),
                txtInformacionClienteApellidos.getText().toUpperCase(), cmbInformacionClienteGenero.getSelectedItem().toString().toUpperCase(),
                fechaNacimiento, txtInformacionClienteTelefono.getText(), txtInformacionClienteCorreoElectronico.getText(),
                txtInformacionClienteCalleAvenida.getText().toUpperCase(), txtInformacionClienteNumeroCasa.getText().toUpperCase(),
                txtInformacionClienteZona.getText(), codigo_direccion, txtInformacionClienteCuentaBancaria.getText(),
                txtInformacionClientePerfilFacebook.getText().toUpperCase(), txtInformacionClientePerfilInstagram.getText().toUpperCase(),
                pdfParaDpiSiActualiza, codigo_cliente);
            ConexionBD.Finalizar();
            
        }       
        
        
        //SE VERIFICA SI SE REALIZÓ LA ACTUALIZACIÓN DE DATOS
        if(actualizarCliente == true){
            JOptionPane.showMessageDialog(null, "DATOS INGRESADOS ÉXITOSAMENTE");
            
            //LIMPIEZA DE CAMPOS
            vaciarCampos();
            
            //ACTUALIZA LA TABLA PRINCIPAL
            //ACTUALIZA LA TABLA PRINCIPAL
            ConexionBaseDeDatos.ConexionBD.Iniciar();
            actualizarTablaClientes(ConexionBaseDeDatos.ConexionBD_Cliente.mostrarTodoClientes());
            ConexionBaseDeDatos.ConexionBD.Finalizar();
            
            //LIMPIEZA DE VARIABLES GLOBALES
            actualizarCliente = false;
            codigo_direccion = 0;
            direccion_completa = null;
            nombreArchivo = null;
            rutaArchivo = null;
            state = null;
            codigo_cliente = 0;
            pdfDpi = null;
            dispose();
        }else{
            JOptionPane.showMessageDialog(null, "HUBO UN ERROR AL INGRESAR LOS DATOS");
        }
    }//GEN-LAST:event_lblBotonActualizarRegistroMouseClicked

    private void txtInformacionClienteDPIKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtInformacionClienteDPIKeyTyped
        // VALIDACIÓN DE SOLO NÚMEROS
        char validar = evt.getKeyChar();
        
        if(Character.isLetter(validar)){
            getToolkit().beep();
            evt.consume();
            
            JOptionPane.showMessageDialog(null, "Solo se permite el ingreso de números.");
        }
    }//GEN-LAST:event_txtInformacionClienteDPIKeyTyped

    private void txtInformacionClienteTelefonoKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtInformacionClienteTelefonoKeyTyped
        // VALIDACIÓN DE SOLO NÚMEROS
        char validar = evt.getKeyChar();
        
        if(Character.isLetter(validar)){
            getToolkit().beep();
            evt.consume();
            
            JOptionPane.showMessageDialog(null, "Solo se permite el ingreso de números.");
        }
    }//GEN-LAST:event_txtInformacionClienteTelefonoKeyTyped

    private void txtInformacionClienteNumeroCasaKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtInformacionClienteNumeroCasaKeyTyped
        // VALIDACIÓN DE SOLO NÚMEROS
        char validar = evt.getKeyChar();
        
        if(Character.isLetter(validar)){
            getToolkit().beep();
            evt.consume();
            
            JOptionPane.showMessageDialog(null, "Solo se permite el ingreso de números.");
        }
    }//GEN-LAST:event_txtInformacionClienteNumeroCasaKeyTyped

    private void txtInformacionClienteZonaKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtInformacionClienteZonaKeyTyped
        // VALIDACIÓN DE SOLO NÚMEROS
        char validar = evt.getKeyChar();
        
        if(Character.isLetter(validar)){
            getToolkit().beep();
            evt.consume();
            
            JOptionPane.showMessageDialog(null, "Solo se permite el ingreso de números.");
        }
    }//GEN-LAST:event_txtInformacionClienteZonaKeyTyped

    private void txtInformacionClienteCuentaBancariaKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtInformacionClienteCuentaBancariaKeyTyped
        // VALIDACIÓN DE SOLO NÚMEROS
        char validar = evt.getKeyChar();
        
        if(Character.isLetter(validar)){
            getToolkit().beep();
            evt.consume();
            
            JOptionPane.showMessageDialog(null, "Solo se permite el ingreso de números.");
        }
    }//GEN-LAST:event_txtInformacionClienteCuentaBancariaKeyTyped

    private void jLabel19MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel19MouseClicked
        //VALIDAR SI EXISTE UN PDF AGREGADO
        if(txtInformacionClientePDFDPI.getText().equals("")){
            JOptionPane.showMessageDialog(null, "Debe agregar un PDF previamente a visualizar.");
            return;
        }

        //FUNCIÓN PARA VISUALIZAR PDF
        if(verificarSiAgregoArchivo == true){//PRIMER IF POR SI SE AGREGA NUEVO ARCHIVO
            try{
                ProcessBuilder visualizar = new ProcessBuilder();//SE PREPARA EL PROCESSBUILDER PARA VIZUALIZAR
                visualizar.command("cmd.exe","/c",rutaArchivo);//SE LE BRINDA LA RUTA
                visualizar.start();//SE ABRE EL ARCHIVO
            }catch(IOException ex){
                Logger.getLogger(frmInClienteNuevo.class.getName()).log(Level.SEVERE, null, ex);
            }
        }else{            
            try { 
                //SE PREPARA EL ARCHIVO BLOB COMO INPUTSTREAM
                InputStream bos = pdfDpi.getBinaryStream();        
                
                //SE REALIZAN LAS CONVERSIONES
                int tamanoInput = bos.available();
                byte[] datosPDF = new byte[tamanoInput];
                bos.read(datosPDF, 0, tamanoInput);
                
                //SE DESCARGA EL ARCHIVO EN LA RUTA DEL ROOT DEL PROYECTO
                OutputStream out = new FileOutputStream("temporal.pdf");
                out.write(datosPDF);

                //SE CIERRAN LOS STREAM
                out.close();
                bos.close();   
                
                //NUEVAMENTE CON PROCESSBUILDER SE VISUALIZA EL ARCHIVO DESCARGADO
                ProcessBuilder visualizar = new ProcessBuilder();
                visualizar.command("cmd.exe","/c","temporal.pdf");
                visualizar.start();
                
            }catch (IOException | NumberFormatException  | SQLException ex) {
                JOptionPane.showMessageDialog(null, "Debe cerrar todos los archivos previamente abiertos. - " + ex.getMessage());
            }            
        }
    }//GEN-LAST:event_jLabel19MouseClicked
    
    private void llenarCampos(ResultSet estructuraTabla){
        try{
            //se usa un while ya que se va a recorrer fila por fila lo que se obtuvo de la BD.
            while (estructuraTabla.next()) { 
                
                //se obtienen los datos de la base de datos mediante el uso del constructor de la clase correspondiente
                ClassCliente cliente = new ClassCliente( //se instancia un objeto de la clase correspondiente para llenar la tabla mediante un while
                        estructuraTabla.getInt("codigo"),                        
                        estructuraTabla.getString("state"),
                        estructuraTabla.getString("dpi"),
                        estructuraTabla.getString("nombres"),
                        estructuraTabla.getString("apellidos"),
                        estructuraTabla.getString("fecha_nacimiento"),
                        estructuraTabla.getString("genero"),
                        estructuraTabla.getString("telefono"),
                        estructuraTabla.getString("correo_electronico"),
                        estructuraTabla.getString("calle_avenida"),
                        estructuraTabla.getString("numero_casa"),
                        estructuraTabla.getString("zona"),
                        estructuraTabla.getInt("cod_direccion"),
                        estructuraTabla.getString("cuenta_bancaria"),
                        estructuraTabla.getString("enlace_facebook"),
                        estructuraTabla.getString("enlace_instagram"),
                        estructuraTabla.getBlob("pdf_dpi"));
                
                //GUARDAR DATOS QUE NO SE AGREGARÁN A LOS TEXTBOX
                codigo_cliente = cliente.getCodigo();
                state = cliente.getState();
                codigo_direccion = cliente.getCod_direccion();
                pdfDpi = cliente.getPdf_dpi();
                
                //SENTENCIA PARA EL COMBOBOX DE GENERO
                int genero;
                if(cliente.getGenero().equals("MASCULINO")){
                    genero = 1;
                }else{
                    genero = 2;
                }
                
                //CONVERSIÓN DE FECHA DE STRING A DATE
                DateFormat formato = new SimpleDateFormat("yyyy-MM-dd");
                Date fechaNacimiento = null;
                try {
                    fechaNacimiento = formato.parse(cliente.getFecha_nacimiento());
                } catch (ParseException ex) {
                    Logger.getLogger(frmInClienteInformacion.class.getName()).log(Level.SEVERE, null, ex);
                }
                
                //OBTENER DIRECCION DEL CLIENTE
                direccion_completa = ConexionBD_Cliente.obtenerDireccionParaCliente(codigo_direccion);                
                
                //SE AGREGAN LOS DATOS A LAS CAJAS DE TEXTO
                txtInformacionClienteDPI.setText(cliente.getDpi());
                txtInformacionClienteNombres.setText(cliente.getNombres());
                txtInformacionClienteApellidos.setText(cliente.getApellidos());
                cmbInformacionClienteGenero.setSelectedIndex(genero);
                dcInformacionFechaNacimiento.setDate(fechaNacimiento);
                txtInformacionClienteTelefono.setText(cliente.getTelefono());
                txtInformacionClienteCorreoElectronico.setText(cliente.getCorreo_electronico());
                txtInformacionClienteCalleAvenida.setText(cliente.getCalle_avenida());
                txtInformacionClienteNumeroCasa.setText(cliente.getNumero_casa());
                txtInformacionClienteZona.setText(cliente.getZona());
                txtInformacionClienteDireccion.setText(direccion_completa);
                txtInformacionClienteCuentaBancaria.setText(cliente.getCuenta_bancaria());
                txtInformacionClientePerfilFacebook.setText(cliente.getEnlace_facebook());
                txtInformacionClientePerfilInstagram.setText(cliente.getEnlace_instagram());    
                if(pdfDpi != null){
                    txtInformacionClientePDFDPI.setText("PDF Agregado");
                }
                
                                
            }
        }catch(SQLException ex){
            Logger.getLogger(ConexionBD.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null, "Parece que Hubo un error al cargar la tabla: " + ex);
        }
    }
    
    //FUNCIONES
    //FUNCION PARA VALIDAR DATOS
    private boolean validarCampos(){
        if(txtInformacionClienteDPI.getText().equals("")){
            JOptionPane.showMessageDialog(null, "Campo Vacío - DPI");
            txtInformacionClienteDPI.requestFocusInWindow();
            return false;
        }
        if(txtInformacionClienteNombres.getText().equals("")){
            JOptionPane.showMessageDialog(null, "Campo Vacío - Nombres");
            txtInformacionClienteNombres.requestFocusInWindow();
            return false;
        }
        if(txtInformacionClienteApellidos.getText().equals("")){
            JOptionPane.showMessageDialog(null, "Campo Vacío - Apellidos");
            txtInformacionClienteApellidos.requestFocusInWindow();
            return false;
        }
        if(cmbInformacionClienteGenero.getSelectedIndex() == 0){
            JOptionPane.showMessageDialog(null, "Seleccione Género");
            cmbInformacionClienteGenero.requestFocusInWindow();
            return false;
        }
        if(dcInformacionFechaNacimiento.getDate() == null){
            JOptionPane.showMessageDialog(null, "Agregue Fecha de Nacimiento");
            dcInformacionFechaNacimiento.requestFocusInWindow();
            return false;
        }
        if(txtInformacionClienteTelefono.getText().equals("")){
            JOptionPane.showMessageDialog(null, "Campo Vacío - Teléfono");
            txtInformacionClienteTelefono.requestFocusInWindow();
            return false;
        }
        if(txtInformacionClienteCorreoElectronico.getText().equals("")){
            JOptionPane.showMessageDialog(null, "Campo Vacío - Correo Electrónico");
            txtInformacionClienteCorreoElectronico.requestFocusInWindow();
            return false;
        }
        if(txtInformacionClienteCalleAvenida.getText().equals("")){
            JOptionPane.showMessageDialog(null, "Campo Vacío - Calle/Avenida");
            txtInformacionClienteCalleAvenida.requestFocusInWindow();
            return false;
        }
        if(txtInformacionClienteNumeroCasa.getText().equals("")){
            JOptionPane.showMessageDialog(null, "Campo Vacío - Número de Casa");
            txtInformacionClienteNumeroCasa.requestFocusInWindow();
            return false;
        }
        if(txtInformacionClienteZona.getText().equals("")){
            JOptionPane.showMessageDialog(null, "Campo Vacío - Zona");
            txtInformacionClienteZona.requestFocusInWindow();
            return false;
        }
        if(txtInformacionClienteDireccion.getText().equals("")){
            JOptionPane.showMessageDialog(null, "Campo Vacío - Dirección");
            txtInformacionClienteDireccion.requestFocusInWindow();
            return false;
        }
        if(txtInformacionClienteCuentaBancaria.getText().equals("")){
            JOptionPane.showMessageDialog(null, "Campo Vacío - Cuenta Bancaria");
            txtInformacionClienteCuentaBancaria.requestFocusInWindow();
            return false;
        }
        return true;
    }

    //FUNCIÓN PARA VACIAR CAMPOS
    private void vaciarCampos(){
        txtInformacionClienteDPI.setText("");
        txtInformacionClienteNombres.setText("");
        txtInformacionClienteApellidos.setText("");
        cmbInformacionClienteGenero.setSelectedIndex(0);
        dcInformacionFechaNacimiento.setDate(null);
        txtInformacionClienteTelefono.setText("");
        txtInformacionClienteCorreoElectronico.setText("");
        txtInformacionClienteCalleAvenida.setText("");
        txtInformacionClienteNumeroCasa.setText("");
        txtInformacionClienteZona.setText("");
        txtInformacionClienteDireccion.setText("");
        txtInformacionClienteCuentaBancaria.setText("");
        txtInformacionClientePerfilFacebook.setText("");
        txtInformacionClientePerfilInstagram.setText("");
        txtInformacionClientePDFDPI.setText("");
    }
    
    //ACTUALIZAR LA TABLA PRINCIPAL DE CLIENTES
    private void actualizarTablaClientes(ResultSet estructuraTabla) {
        try {
            DefaultTableModel modelo = new DefaultTableModel(){
                @Override
                public boolean isCellEditable(int filas, int columnas){
                    if(columnas == 5){
                        return true;
                    }else{
                        return false;
                    }
                }
            };
            //Primero se Definen las Columnas
            modelo.addColumn("CÓDIGO");
            modelo.addColumn("DPI");
            modelo.addColumn("NOMBRES Y APELLIDOS");
            //modelo.addColumn("Fecha Nac.");
            modelo.addColumn("TELÉFONO");
            modelo.addColumn("CORREO ELECTRÓNICO");
            //modelo.addColumn("Direccion");
            //modelo.addColumn("Tipo Serv.");
            
            //se definen los tamaños de las columnas
            frmInClientes.tbClientes.setModel(modelo);
            
            frmInClientes.tbClientes.getColumnModel().getColumn(0).setPreferredWidth(100);
            frmInClientes.tbClientes.getColumnModel().getColumn(0).setMaxWidth(110);
            frmInClientes.tbClientes.getColumnModel().getColumn(0).setMinWidth(5);
            
            frmInClientes.tbClientes.getColumnModel().getColumn(1).setPreferredWidth(120);
            frmInClientes.tbClientes.getColumnModel().getColumn(1).setMaxWidth(130);
            frmInClientes.tbClientes.getColumnModel().getColumn(1).setMinWidth(5);
            
            frmInClientes.tbClientes.getColumnModel().getColumn(2).setPreferredWidth(300);
            frmInClientes.tbClientes.getColumnModel().getColumn(2).setMaxWidth(310);
            frmInClientes.tbClientes.getColumnModel().getColumn(2).setMinWidth(5);
            
            frmInClientes.tbClientes.getColumnModel().getColumn(3).setPreferredWidth(100);
            frmInClientes.tbClientes.getColumnModel().getColumn(3).setMaxWidth(110);
            frmInClientes.tbClientes.getColumnModel().getColumn(3).setMinWidth(5);
            
            /*tbClientes.getColumnModel().getColumn(4).setPreferredWidth(80);
            tbClientes.getColumnModel().getColumn(4).setMaxWidth(110);
            tbClientes.getColumnModel().getColumn(4).setMinWidth(5);
            
            tbClientes.getColumnModel().getColumn(5).setPreferredWidth(170);
            tbClientes.getColumnModel().getColumn(5).setMaxWidth(200);
            tbClientes.getColumnModel().getColumn(5).setMinWidth(5);
            
            tbClientes.getColumnModel().getColumn(6).setPreferredWidth(80);
            tbClientes.getColumnModel().getColumn(6).setMaxWidth(110);
            tbClientes.getColumnModel().getColumn(6).setMinWidth(5);*/
            
            //se usa un while ya que se va a recorrer fila por fila lo que se obtuvo de la BD.
            while (estructuraTabla.next()) { 
                
                //se obtienen los datos de la base de datos mediante el uso del constructor de la clase correspondiente
                ClassMostrarClientes usuario = new ClassMostrarClientes( //se instancia un objeto de la clase correspondiente para llenar la tabla mediante un while
                    estructuraTabla.getInt("codigo"),
                    estructuraTabla.getString("dpi"),
                    estructuraTabla.getString("nombre"), 
                    estructuraTabla.getString("telefono"), 
                    estructuraTabla.getString("correo_electronico"));

                // se añade el registro encontrado al modelo de la tabla
                modelo.addRow(new Object[]{
                    usuario.getCodigo(),                  
                    usuario.getDpi(),
                    usuario.getNombre(),
                    usuario.getTelefono(),
                    usuario.getCorreo_electronico()});
            }

            
            //se muestra todo en la tabla
            frmInClientes.tbClientes.setModel(modelo);

            
        } catch (SQLException ex) {
            Logger.getLogger(ConexionBaseDeDatos.ConexionBD.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null, "Parece que Hubo un error al cargar la tabla: " + ex);
        }
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> cmbInformacionClienteGenero;
    private com.toedter.calendar.JDateChooser dcInformacionFechaNacimiento;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel lblBotonActualizarRegistro;
    private javax.swing.JLabel lblBotonAdjuntarArchivo;
    private javax.swing.JLabel lblBotonBuscarDireccion;
    private javax.swing.JTextField txtInformacionClienteApellidos;
    private javax.swing.JTextField txtInformacionClienteCalleAvenida;
    private javax.swing.JTextField txtInformacionClienteCorreoElectronico;
    private javax.swing.JTextField txtInformacionClienteCuentaBancaria;
    private javax.swing.JTextField txtInformacionClienteDPI;
    public static javax.swing.JTextField txtInformacionClienteDireccion;
    private javax.swing.JTextField txtInformacionClienteNombres;
    private javax.swing.JTextField txtInformacionClienteNumeroCasa;
    private javax.swing.JTextField txtInformacionClientePDFDPI;
    private javax.swing.JTextField txtInformacionClientePerfilFacebook;
    private javax.swing.JTextField txtInformacionClientePerfilInstagram;
    private javax.swing.JTextField txtInformacionClienteTelefono;
    private javax.swing.JTextField txtInformacionClienteZona;
    // End of variables declaration//GEN-END:variables
}
